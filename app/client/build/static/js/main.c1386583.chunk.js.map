{"version":3,"sources":["Graph.js","OpenDialog.js","App.js","serviceWorker.js","index.js"],"names":["React","forwardRef","props","ref","graph","thickness","color","width","height","data","useMemo","G","step","Gp","nodes","links","i","length","id","sequence","rest","done","last","j","source","push","pos","concat","target","originalId","linkNum","strand1","strand2","reprocessGraph","total","map","d","Object","create","max","Math","simulation","d3","force","distance","link","strength","tick","useEffect","current","innerHTML","svg","attr","g","append","selectAll","join","darker","x","y","call","extent","scaleExtent","on","transform","appendChild","node","OpenDialog","show","onHide","onResult","Modal","Header","closeButton","Title","Body","Footer","Button","variant","onClick","IGV","igv","createBrowser","genome","locus","useRef","style","paddingTop","paddingBottom","margin","border","onOpen","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","className","NavDropdown","title","Item","Link","App","useState","setShow","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c1386583.chunk.js","sourcesContent":["import React, { useMemo, useEffect } from 'react'\nimport * as d3 from 'd3'\nfunction reprocessGraph(G, step = 1000) {\n  const Gp = { nodes: [], links: [] } // G'\n\n  for (let i = 0; i < G.nodes.length; i++) {\n    const { id, sequence, ...rest } = G.nodes[i]\n    let nodes = []\n    let done = false\n    let last = 0\n    for (let j = 0; j < sequence.length; j += step) {\n      let source\n      if (j === 0) {\n        source = `${id}-start`\n      } else if (j + step >= sequence.length) {\n        source = `${id}-end`\n        done = true\n      } else {\n        source = `${id}-${j}`\n      }\n      nodes.push({ ...rest, id: source, pos: j })\n      last = j\n    }\n    if (!done) {\n      nodes.push({ ...rest, id: `${id}-end`, pos: last })\n    }\n    Gp.nodes = Gp.nodes.concat(nodes)\n    for (let j = 0; j < nodes.length - 1; j++) {\n      const source = nodes[j].id\n      const target = nodes[j + 1].id\n      Gp.links.push({\n        source,\n        target,\n        originalId: id,\n        linkNum: i,\n        sequence: !!sequence, // could put actual sequence here if needed\n      })\n    }\n  }\n  for (let i = 0; i < G.links.length; i++) {\n    const { strand1, strand2, source, target, rest } = G.links[i]\n\n    // enumerates cases for which end of source connects to\n    // which end of the target\n    if (strand1 === '+' && strand2 === '+') {\n      Gp.links.push({\n        source: `${source}-end`,\n        target: `${target}-start`,\n        ...rest,\n      })\n    }\n    if (strand1 === '-' && strand2 === '+') {\n      Gp.links.push({\n        source: `${source}-start`,\n        target: `${target}-start`,\n        ...rest,\n      })\n    }\n    if (strand1 === '-' && strand2 === '-') {\n      Gp.links.push({\n        source: `${source}-start`,\n        target: `${target}-end`,\n        ...rest,\n      })\n    }\n    if (strand1 === '+' && strand2 === '-') {\n      Gp.links.push({\n        source: `${source}-end`,\n        target: `${target}-end`,\n        ...rest,\n      })\n    }\n  }\n  return Gp\n}\n\nconst Graph = React.forwardRef((props, ref) => {\n  const { graph, thickness = 10, color, width = 400, height = 500 } = props\n  const data = useMemo(() => {\n    return reprocessGraph(graph)\n  }, [graph])\n  let total = graph.nodes.length\n\n  const links = useMemo(() => {\n    const links = data.links.map(d => Object.create(d))\n    const nodes = data.nodes.map(d => Object.create(d))\n    let max = 0\n    for (let i = 0; i < data.links.length; i++) {\n      max = Math.max(max, (data.links[i].sequence || {}).length || 0)\n    }\n\n    const simulation = d3\n      .forceSimulation(nodes)\n      .force(\n        'link',\n        d3\n          .forceLink(links)\n          .id(d => d.id)\n          .distance(link => {\n            return link.sequence ? 1 : 10\n          }),\n      )\n      .force('charge', d3.forceManyBody().strength(-100))\n      .force('center', d3.forceCenter(width / 2, height / 2))\n\n    /// run a 1000 simulation node ticks\n    for (var i = 0; i < 1000; ++i) {\n      simulation.tick()\n    }\n    return links\n  }, [data.links, data.nodes, height, width])\n\n  useEffect(() => {\n    ref.current.innerHTML = ''\n    const svg = d3.create('svg').attr('viewBox', [0, 0, width, height])\n    const g = svg\n      .append('g')\n      .attr('stroke-opacity', 0.6)\n      .selectAll('line')\n      .data(links)\n      .join('line')\n      .attr('stroke-width', d => {\n        return d.sequence ? thickness * 1.5 : 3\n      })\n      .attr('stroke', d => {\n        return d.sequence\n          ? d3.hsl(d3[`interpolate${color}`](d.linkNum / total)).darker()\n          : 'grey'\n      })\n      .attr('x1', d => d.source.x)\n      .attr('y1', d => d.source.y)\n      .attr('x2', d => d.target.x)\n      .attr('y2', d => d.target.y)\n\n    // zoom logic, similar to https://observablehq.com/@d3/zoom\n    function zoomed() {\n      g.attr('transform', d3.event.transform)\n    }\n    svg.call(\n      d3\n        .zoom()\n        .extent([\n          [0, 0],\n          [width, height],\n        ])\n        .scaleExtent([0.1, 8])\n        .on('zoom', zoomed),\n    )\n\n    ref.current.appendChild(svg.node())\n  }, [\n    color,\n    data.links,\n    data.nodes,\n    height,\n    links,\n    ref,\n    thickness,\n    total,\n    width,\n  ])\n\n  return <div ref={ref} />\n})\n\nexport { Graph }\n","import React from 'react'\nimport { Button, Modal } from 'react-bootstrap'\n\nexport function OpenDialog({ show, onHide, onResult }) {\n  return (\n    <Modal show={show} onHide={onHide}>\n      <Modal.Header closeButton>\n        <Modal.Title>Modal title</Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body>\n        Contents\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={onHide}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal.Body>\n    </Modal>\n  )\n}\n","import React, { useEffect, useState, useRef } from 'react'\nimport { Graph } from './Graph'\nimport { saveAs } from 'file-saver'\nimport { OpenDialog } from './OpenDialog'\nimport { Button, Form, Navbar, Nav, NavDropdown } from 'react-bootstrap'\nimport igv from 'igv'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\n\n// import graph from './MT.json'\n// console.log(graph)\n\nfunction IGV() {\n  useEffect(() => {\n    igv.createBrowser(ref.current, { genome: 'hg38', locus: 'BRCA1' })\n  }, [])\n\n  const ref = useRef()\n  return (\n    <div\n      ref={ref}\n      style={{\n        paddingTop: '10px',\n        paddingBottom: '10px',\n        margin: '8px',\n        border: '1px solid lightgray',\n      }}\n    />\n  )\n}\nfunction Header({ onOpen }) {\n  return (\n    <Navbar bg=\"light\" expand=\"lg\">\n      <Navbar.Brand href=\"#home\">graphgenome browser</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <NavDropdown title=\"File\" id=\"basic-nav-dropdown\">\n            <NavDropdown.Item onClick={() => onOpen(true)}>\n              Open\n            </NavDropdown.Item>\n          </NavDropdown>\n          <Nav.Link href=\"#link\">About</Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  )\n}\n\n// adapted from https://observablehq.com/@mbostock/saving-svg\nfunction serialize(svg) {\n  const xmlns = 'http://www.w3.org/2000/xmlns/'\n  const xlinkns = 'http://www.w3.org/1999/xlink'\n  const svgns = 'http://www.w3.org/2000/svg'\n\n  svg = svg.cloneNode(true)\n  const fragment = `${window.location.href}#`\n  const walker = document.createTreeWalker(\n    svg,\n    NodeFilter.SHOW_ELEMENT,\n    null,\n    false,\n  )\n  while (walker.nextNode()) {\n    for (const attr of walker.currentNode.attributes) {\n      if (attr.value.includes(fragment)) {\n        attr.value = attr.value.replace(fragment, '#')\n      }\n    }\n  }\n  svg.setAttributeNS(xmlns, 'xmlns', svgns)\n  svg.setAttributeNS(xmlns, 'xmlns:xlink', xlinkns)\n  const serializer = new window.XMLSerializer()\n  const string = serializer.serializeToString(svg)\n  return new Blob([string], { type: 'image/svg+xml' })\n}\n\nexport function GraphContainer(props) {\n  const [value, setValue] = useState('Rainbow')\n  const ref = useRef()\n  return (\n    <div>\n      <Form.Group>\n        <Form.Label>Example select</Form.Label>\n        <Form.Control\n          value={value}\n          onChange={event => setValue(event.target.value)}\n          as=\"select\"\n        >\n          <option>Turbo</option>\n          <option>Rainbow</option>\n          <option>Spectral</option>\n          <option>Viridis</option>\n          <option>RdYlBu</option>\n        </Form.Control>\n        <Button onClick={() => saveAs(serialize(ref.current.children[0]))}>\n          Export SVG\n        </Button>\n      </Form.Group>\n      <Graph ref={ref} {...props} color={value} />\n    </div>\n  )\n}\n\nasync function fetchGraph() {\n  return await fetch(\"/graph\")\n    .then(response => response.json())\n    .catch(error => {\n      console.error(error);\n    });\n}\n\nfunction App() {\n  const [show, setShow] = useState(false);\n  const [graph, setGraph] = useState({});\n\n  // let graph = fetchGraph()\n  // console.log(graph)\n\n  // fetch(\"/graph\")\n  //     .then(res => setGraph(res))\n\n  return (\n    <div>\n      <Header\n        onOpen={() => {\n          setShow(true)\n        }}\n      />\n      <OpenDialog show={show} onHide={() => setShow(false)} />\n      <div className=\"flexcontainer\">\n        <div id=\"sidebar\" className=\"sidebar\">\n          {/*<GraphContainer graph={graph} />*/}\n        </div>\n        <div className=\"body\">\n          <IGV />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}